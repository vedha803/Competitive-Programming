class Solution:
    def constructFromPrePost(self, preorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        if not preorder:
            return None  

        root = TreeNode(preorder[0])
        
        if len(preorder) == 1:
            return root  

        # Find the left subtree's root value in preorder
        left_subtree_root_val = preorder[1]
        
        # Find the left subtree's size in postorder
        left_subtree_size = postorder.index(left_subtree_root_val) + 1
        
        root.left = self.constructFromPrePost(preorder[1:left_subtree_size+1], postorder[:left_subtree_size])
        root.right = self.constructFromPrePost(preorder[left_subtree_size+1:], postorder[left_subtree_size:-1])

        return root
